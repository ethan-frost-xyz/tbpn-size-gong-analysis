[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "gong-detector"
version = "0.1.0"
description = "YAMNet-based audio event detection system for identifying gong sounds in audio files"
authors = [
    {name = "Ethan Frost", email = "ethanfrostbvt@gmail.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
keywords = ["audio", "machine-learning", "yamnet", "gong", "detection", "tensorflow"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Sound/Audio :: Analysis",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "tensorflow>=2.15.0",
    "tensorflow-hub>=0.14.0", 
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "yt-dlp>=2023.7.6",
    "matplotlib>=3.7.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "ruff>=0.1.0",
    "pre-commit>=3.0.0",
]
audio = [
    "librosa>=0.10.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/tbpn-size-gong-analysis"
Documentation = "https://github.com/yourusername/tbpn-size-gong-analysis/blob/main/docs/"
Repository = "https://github.com/yourusername/tbpn-size-gong-analysis.git"
Issues = "https://github.com/yourusername/tbpn-size-gong-analysis/issues"

[project.scripts]
gong-detect = "gong_detector.core.detect_from_youtube:main"

[tool.ruff]
target-version = "py39"
line-length = 88
src = ["gong_detector", "tests"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
    "D",  # pydocstyle
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "D100",  # missing docstring in public module
    "D104",  # missing docstring in public package
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "D103"]
"tests/*" = ["D103", "D100", "D101", "D102"]

[tool.ruff.lint.pydocstyle]
convention = "pep257"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=gong_detector",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["gong_detector"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 